Slice 
[Round 1]
1. When should saveInstance state be called and why?
2. Difference between Threads & coroutines.
3. Design an SDK for authentication.
4. What is clean architecture? How is clean architecture used with MVVM?
5. What happens when a phone runs out of memory while running a task?
6. Async, launch, parent & child coroutines, cancelling a child coroutine, sequential & parallel coroutines, dispatchers 
7. Flows, Shared flow & Example of using a live data.
8. Why are viewModels used instead of classes?


Meesho Interview:

[Round 1] 
1. Resume walkthrough. Tried to intimidate a lot. Take water before interview & be confident.
2. Seal Class in Kotlin : Sealed classes in Kotlin provide a robust way to handle restricted hierarchies and ensure exhaustive
                          handling of different states. They are particularly beneficial in Android development for managing UI states, 
                          network responses, and other scenarios where a fixed set of types is needed. This leads to more maintainable
                          and error-resistant code.
3. Encryption used in MediBuddy
4. What are the Dependency Injection tools used in MediBuddy?: Koin, Dagger2, HILT

[Round 2] : Live coding round
1. Coroutines in depth
2. Parallelism in coroutines
3. Cancellation of coroutines
4. Error handelling in coroutines. 


Jar Interview :

[Round 1]
1. Practical applications on coroutines with examples
2. Inline functions
3. supervisorScope
4. suspend keyword implementation
5. Hot flow vs Cold flow
6. How long does a thread needs to be inactivie for an ANR to occur - 5 seconds
7. Work Manager : https://medium.com/@mohit2656422/top-10-work-manager-questions-2024-3631683bf290

[Round 2]
1. Compose deepdive and making a complex UI with compose
2. Computational strain while using Linear Layout, Relative Layout & Constrained Layout.
3. Why do we use default dispatchers for CPU intensive tasks?
4. How to make Grid recycler view using compose? : LazyGrid
5. How internally threads word when async is used in compose?
6. Drawing shapes in XML.


Grab interview:

1. How does the hash-map work? https://www.youtube.com/watch?v=c3RVW3KGIIE
2. Which one would you use relativelayout or linearlayout
3. Launch modes — https://medium.com/@iammert/android-launchmode-visualized-8843fc833dbe
4. Activity lifecycle
5. When is onSaveInstance will be called — when the activity is about to stop.
6. Case where onSavinstance is not called  — When user explicitly closes the activity or wen finish() is called.
7. Difference between commit and commitAllowStateLoss —— commit() — does not happen immediately.
    Will be executed on the main thread when that thread comes back. 
    commitAllowStateLoss() —— the state which is lost in commit using state loss :
    If the activity that has a frag A, if activity gets stopped for some reason the state from onSaveInstance may or may not get saved.
8. Difference between MVC, MVP, MVVM.


Other interviews :

1. Explain singleton design pattern
2. What are some of the design patterns you know — MVC, MVP, MVVM
3. If there is activity A that has opened activity B, what all methods will be invoked when you press back on Activity B starting from onBackpressed().
4. Explain fragment lifecycle
5. Why is serializable slower than parcelable — Serializable uses default java interface implementation which uses reflection and thus produces garbage overhead.
    (Reflection is the process in which one code can inspect another code at runtime). Parcelable is object specific created for that particular object.
    It is a custom serialization thus there is no garbage and the process is faster.
    Serializable and Parcelable are interfaces used to serialize objects, meaning converting them into a format that can be easily stored and transferred



ULA interview: (25-June-2020)

Questions were based mostly on system design
1. Design Instagram : Given large size images(>10MB) how will you show images in the app— compression(on server side or in app). 
    How the images will be viewd by other users. Basically how does Instagram work?
2. Design messaging system such as WhatsApp https://techtakshila.com/system-design-interview/chapter-1
3. How does push notification work?
    1.https://webengage.com/blog/push-notifications/#:~:text=How%20do%20Push%20Notifications%20Work%3F,-To%20understand%20how&text=Client%20app%E2%80%93%20The%20app%20which,it%20to%20the%20client%20app. 
    2. https://stackoverflow.com/questions/11508613/how-does-push-notification-technology-work-on-android
4. 1 DSA problem. 
5. Xmpp, Websockets. https://blog.teamtreehouse.com/an-introduction-to-websockets
6. What is the biggest prob that you faced and how did you solve that problem?
7. Explain how you implemented Geofencing.



Delhivery Interview:

1. Linked list problem based on reversing list
2. Android basics
3. RxJava
4. Meditor livedata and Mutable livedata diff
5. How will you handle the lag in autocomplete text i.e.  if there is name Akshay and each letter makes an api call
6. Lifecycle of a view https://proandroiddev.com/the-life-cycle-of-a-view-in-android-6a2c4665b95e
7. what does suspend function do in couroutines?
8. if there are 100 items in count for recyclerview, at a time how many list items will the viewholder be holding?
9. When uploading apk to playstore, what is the diff between app bundle and .apk?
10. Firebase related questions
11. Which is better - relative layout or linear layout?


VmWare interview

1. Difference between serializable and parcelable
2. Double interface design principle
3. Mediator livedata
4. Design pattern u know and explain them
5. what does this in setOnclickListener(this) signify?
6. What was the reason from java to kotlin
7. Difference between listview and recycler view
8. SOLID Principles in-depth


RSA interview

Round 1&2 : 
    1. Content provider, Content resolver : Imagine all the services to be books in a library -> 
        - The Content Provider (librarian) manages all the data and decides who can access it, 
        - while the Content Resolver (person) helps other parts of the phone access that data without needing to know all the details about where it's stored or how it's organized.
    2. Broadcast receiver
    3. How will u make a RSA application, mention design
    4. Is it ideal to use livedata with room when app is not making api calls for a long time(say a year)
    5. How does contentprovider and room work in sync? https://rash-3692.medium.com/example-of-room-database-with-content-provider-part1-23b93646e09f
    6. How is local broadcast manager better over broadcast receiver? 
    7. Do you know how to do unit testing in mockito?
    8. What are coroutines? 
 
 Round 3 :
    1. Do you know what is new in android 12?
    2. If app is downloading something and you kill the app : how will you handle this scenerio ?
    3. What happens when you press home button and back button in the app? 
        https://stackoverflow.com/questions/34081835/difference-between-back-press-and-home-button-in-android
    4. What happens when you first open the app by clicking on the app icon?
    5. Where do you get your info for what is latest in android from?
    6. Why do you want to change?
    
 
 


ShadowFax Interview :
    
    1. Tell me about the projects you worked on.
    2. What is a Service : types of service ? https://www.vogella.com/tutorials/AndroidServices/article.html
    3. Scenerio : how will communication between service and activity happen, when service is about to stop?
    4. How to send data from fragA to fragB?
    5. Scenerio : Activity(framelayout) -> Opens fragA -> opens fragB -> press back twice -> sometimes app shows blank screen :
                                            Why does this happen and how will u fix this?
    6. Difference between : Compile, minimum and target sdk version
    7. Coroutine : Scenerio - showProgressBar() -> Do an API call -> on finish dismissProgressBar() : how will you do this?
    8. What are some of the disadvantages of using singleton pattern? 
        https://stackoverflow.com/questions/137975/what-are-drawbacks-or-disadvantages-of-singleton-pattern
    9. Do you have any projects on github?
    10. Difference between replace and add in fragment.
    11. What does addtoBackStack do?
 

Chingari app interview :

1. What apps did you work on in the company? What feature did you develop in these apps?
2. Have you worked on any Video related apps?
3. How do you get notifications in your app? Wanted to know abt GCM & FCM.
4. Have you worked with firebase?
5. Do you know A/B testing?
6. If you notice a bug in your app  how do you solve it and release the app, what is the procedure that you follow?


Dot Interview:

1. What are couroutines?
2. What is any class in kotlin?
3. What is Elvis operator?
4. How does async operation happen in coroutines?


BigBasket interview :

1. Difference between  MVVM and MVP - which one will you use and why?
2. How does push notifications work?
3. Designing a chat app.
4. In room Db how do you execute a join operation?
5. How do you provide parameters to constructors in HILT?
6. Write algo for shortest path between source[i][j] & destination[i][j]. DFS & BFS
7. What practices you use for releasing  the apk on playstore ?
8. App security
9. Difference between livedata and immutable live data
10. Difference between data class and class in kotlin
11. You have 3 apis. One is input to another. How will you execute this in coroutines?
12. Advantages of kotlin over java
13. null safety in kotlin
14. What are primary and secondary constructor in kotlin?


Brick n Bolt:

1. What are inline functions in kotlin?
2. What are services in android?
3. Coroutines walkthrough example where certain code is written inside a coroutine and sequence of execution is asked.
4. Serializable vs parcelable
5. 2 pointer DSA problem
6. Types of dispatchers and their applications : 
    Main -> UI-related operations, 
    IO ->  IO-bound tasks, 
    default -> CPU-bound tasks, 
    unconfined -> Tailored to specific threading requirements


Few Other interview Questions on kotlin :

1. What is "is" and "as" in kotlin
2. How to initialise a viewmodel? 
3. What is viewModelProvider and what does it do?
4. Write syntax for extension functions.
5. What is sealed class?
6. Null safety in kotlin.
7. Scoping functions - let, run, apply, etc : Scope functions don't introduce any new technical capabilities, but they can make your code more concise and readable.
8. Higher order functions
9. What is late init and lazy init? Difference between them. :-
     Lateinit can only be used with a var property whereas lazy will always be used with val property.
     A lateinit property can be reinitialised again and again as per the use whereas the lazy property can only be initialised once.
10. 


Important link for android system design https://medium.com/@goncharov.artemv/grokking-the-mobile-system-design-interview-6a06fa94491b
